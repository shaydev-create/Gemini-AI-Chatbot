# ===============================================================================
# üöÄ DOCKER COMPOSE PARA DESARROLLO - GEMINI AI CHATBOT
#
# Este archivo extiende la configuraci√≥n base (docker-compose.yml) para
# crear un entorno de desarrollo optimizado con live-reloading.
#
# Uso:
#   1. Aseg√∫rate de tener un archivo .env configurado.
#   2. Ejecuta: docker-compose -f docker-compose.yml -f docker-compose.dev.yml up --build
#
# ===============================================================================

version: '3.9'

services:
  # -------------------------------------------------------------------------------
  # Servicio de la Aplicaci√≥n (Desarrollo)
  # -------------------------------------------------------------------------------
  # Sobrescribe el servicio 'app' del archivo base.
  app:
    # Construye la imagen usando el Dockerfile pero sin un target espec√≠fico,
    # lo que permite instalar dependencias de desarrollo si se definen.
    build:
      context: .
      dockerfile: Dockerfile
    # El comando para desarrollo usa el servidor de Flask con auto-recarga.
    # Gunicorn no se usa aqu√≠.
    command: flask run --host=0.0.0.0 --port=5000
    ports:
      - "5000:5000" # Expone el puerto de Flask al host.
      - "5678:5678" # Expone el puerto para el depurador remoto (ej. debugpy).
    environment:
      - FLASK_ENV=development # Activa el modo de desarrollo de Flask.
      - FLASK_DEBUG=1         # Activa el depurador interactivo.
    volumes:
      # Monta el c√≥digo fuente completo en el contenedor.
      # Cualquier cambio en el host se refleja inmediatamente, activando el live-reload.
      - .:/app
    # No se necesita 'restart' en desarrollo, ya que se gestiona manualmente.

  # -------------------------------------------------------------------------------
  # Servicios de Base y Cach√© (Desarrollo)
  # -------------------------------------------------------------------------------
  # Exponemos los puertos de la base de datos y la cach√© para que puedan ser
  # accedidos desde herramientas de escritorio (ej. DBeaver, Redis Insight).
  db:
    ports:
      - "5432:5432"

  cache:
    ports:
      - "6379:6379"
