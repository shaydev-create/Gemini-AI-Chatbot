# 🚀 CI/CD Pipeline Optimizado

name: 🚀 CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  PYTHON_DEV_VERSION: '3.11'
  PYTHON_PROD_VERSION: '3.12'
  NODE_VERSION: '18'

jobs:
  # 🧪 Tests Rápidos - Python 3.11 (Desarrollo)
  test-development:
    name: 🧪 Tests - Python 3.11 (Development)
    runs-on: ubuntu-latest
    timeout-minutes: 10
    if: github.ref == 'refs/heads/develop' || github.event_name == 'pull_request'
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: 📦 Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: latest
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: 📦 Cache Poetry dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pypoetry
            .venv
          key: ${{ runner.os }}-poetry-3.11-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-3.11-
            ${{ runner.os }}-poetry-
            
      - name: 📋 Install dependencies
        run: |
          poetry install --with dev --no-interaction --no-ansi --no-root

      - name: 🔧 Quick format check
        run: poetry run ruff format --check app/ tests/ --quiet

      - name: 🔍 Quick lint check
        run: poetry run ruff check app/ tests/ --select=E,W,F --quiet

      - name: 🧪 Run basic tests
        run: |
          APP_ENV=testing poetry run pytest tests/test_basic.py tests/test_main.py -v --tb=short --maxfail=3

  # 🧪 Tests Completos - Python 3.12 (Producción)
  test-production:
    name: 🧪 Tests - Python 3.12 (Production)
    runs-on: ubuntu-latest
    timeout-minutes: 15
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 🐍 Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          
      - name: 📦 Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: latest
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: 📦 Cache Poetry dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pypoetry
            .venv
          key: ${{ runner.os }}-poetry-3.12-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-3.12-
            ${{ runner.os }}-poetry-
            
      - name: 📋 Install dependencies
        run: |
          poetry install --with dev --no-interaction --no-ansi --no-root

      - name: 🔧 Format with Ruff
        run: poetry run ruff format .

      - name: 🔧 Auto-fix with Ruff
        run: poetry run ruff check . --fix

      - name: 🔍 Lint with Ruff
        run: poetry run ruff check .

      - name: 🔍 Type check with mypy
        run: poetry run mypy app/ --ignore-missing-imports

      - name: 🧪 Run optimized tests
        run: |
          python run_tests_optimized.py --fast --maxfail=3

      - name: 📊 Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

  # 🔒 Security Scan (Solo en main)
  security:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐍 Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
        
    - name: 📦 Install Poetry
      uses: snok/install-poetry@v1
      
    - name: 📦 Cache Poetry dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pypoetry
        key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
        restore-keys: |
          ${{ runner.os }}-poetry-
          
    - name: 📋 Install dependencies
      run: |
        poetry install --with dev --no-interaction --no-ansi
        
    - name: 🔍 Run Bandit security scan
      run: poetry run bandit -r app/ -f json -o bandit-report.json || true
        
    - name: 🔍 Run Safety check
      run: poetry run safety check --json --output safety-report.json || true

  # 🐳 Docker Build (Solo en main y releases)
  docker:
    name: 🐳 Docker Build
    runs-on: ubuntu-latest
    needs: [test-prod]
    if: github.ref == 'refs/heads/main' || github.event_name == 'release'
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: 🔑 Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: 🏷️ Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ secrets.DOCKER_USERNAME }}/gemini-ai-chatbot
        tags: |
          type=ref,event=branch
          type=semver,pattern={{version}}
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: 🔨 Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # 🚀 Deploy to Production
  deploy-production:
    name: 🌟 Deploy to Production
    runs-on: ubuntu-latest
    needs: [docker, security]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🌟 Deploy to production
      run: |
        echo "✅ Production deployment ready"
        echo "🐳 Docker image built and pushed"
        echo "🔒 Security checks passed"