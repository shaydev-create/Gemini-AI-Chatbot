name: 🚀 CI/CD Pipelinename: 🚀 CI/CD Pipeline Optimizadoname: 🚀 CI/CD Pipeline Optimizado



on:

  push:

    branches: [ main, develop ]on:on:

  pull_request:

    branches: [ main ]  push:  push:



env:    branches: [ main, develop ]    branches: [ main, develop ]

  PYTHON_VERSION: '3.12'

  pull_request:  pull_request:

jobs:

  test:    branches: [ main ]    branches: [ main ]

    name: 🧪 Tests & Quality

    runs-on: ubuntu-latest  release:  release:

    timeout-minutes: 15

        types: [ published ]    types: [ published ]

    steps:

      - name: 📥 Checkout code

        uses: actions/checkout@v4

env:env:

      - name: 🐍 Set up Python ${{ env.PYTHON_VERSION }}

        uses: actions/setup-python@v4  PYTHON_VERSION: '3.12'  PYTHON_DEV_VERSION: '3.11'

        with:

          python-version: ${{ env.PYTHON_VERSION }}  PYTHON_PROD_VERSION: '3.12'



      - name: 📦 Cache Poetry dependenciesjobs:  NODE_VERSION: '18'

        uses: actions/cache@v3

        with:  test:  SSL_CERT_FILE: "/etc/ssl/certs/ca-certificates.crt"

          path: ~/.cache/pypoetry

          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}    name: 🧪 Tests & Quality



      - name: 🎨 Install Poetry    runs-on: ubuntu-latestjobs:

        uses: snok/install-poetry@v1

    timeout-minutes: 10  test-matrix:

      - name: 📋 Install dependencies

        run: poetry install --with dev --no-interaction        name: 🧪 Test Python ${{ matrix.python-version }}



      - name: 🔧 Format & Lint    steps:    runs-on: ubuntu-latest

        run: |

          poetry run ruff format --check app/ tests/      - name: 📥 Checkout code    timeout-minutes: 15

          poetry run ruff check app/ tests/

        uses: actions/checkout@v4    strategy:

      - name: 🧪 Run tests with coverage

        run: poetry run pytest tests/ -v --cov=app --cov-report=xml --maxfail=5      fail-fast: false



      - name: 📤 Upload coverage      - name: 🐍 Set up Python ${{ env.PYTHON_VERSION }}      matrix:

        uses: codecov/codecov-action@v4

        with:        uses: actions/setup-python@v4        python-version: ['3.11', '3.12', '3.13']

          file: ./coverage.xml

        continue-on-error: true        with:        include:

          python-version: ${{ env.PYTHON_VERSION }}          - python-version: '3.11'

            test-type: 'development'

      - name: 📦 Cache Poetry dependencies            coverage: false

        uses: actions/cache@v3          - python-version: '3.12'

        with:            test-type: 'production'

          path: ~/.cache/pypoetry            coverage: true

          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}          - python-version: '3.13'

          restore-keys: ${{ runner.os }}-poetry-            test-type: 'latest'

            coverage: false

      - name: 🎨 Install Poetry    steps:

        uses: snok/install-poetry@v1      - name: 📥 Checkout code

        with:        uses: actions/checkout@v4

          version: latest

          virtualenvs-create: true      - name: 🔧 Set up Python ${{ matrix.python-version }}

          virtualenvs-in-project: true        uses: actions/setup-python@v4

        with:

      - name: 📋 Install dependencies          python-version: ${{ matrix.python-version }}

        run: poetry install --with dev --no-interaction

      - name: 📦 Cache Poetry dependencies

      - name: 🔧 Format & Lint check        uses: actions/cache@v3

        run: |        with:

          poetry run ruff format --check app/ tests/          path: |

          poetry run ruff check app/ tests/            ~/.cache/pypoetry

            .venv

      - name: 🧪 Run tests with coverage          key: ${{ runner.os }}-poetry-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}

        run: poetry run pytest tests/ -v --cov=app --cov-report=xml          restore-keys: |

            ${{ runner.os }}-poetry-${{ matrix.python-version }}-

      - name: 📤 Upload coverage            ${{ runner.os }}-poetry-

        uses: codecov/codecov-action@v4

        with:      - name: 🎨 Install Poetry

          file: ./coverage.xml        uses: snok/install-poetry@v1

        continue-on-error: true        with:

          version: latest

  security:          virtualenvs-create: true

    name: 🔒 Security Scan          virtualenvs-in-project: true

    runs-on: ubuntu-latest

    needs: [test]      - name: 📋 Install dependencies

    if: github.ref == 'refs/heads/main'        run: poetry install --with dev --no-interaction --no-ansi

    

    steps:      - name: 🔧 Format check

      - name: 📥 Checkout code        run: poetry run ruff format --check app/ tests/ --quiet

        uses: actions/checkout@v4

      - name: 🔍 Lint check

      - name: 🐍 Set up Python        run: poetry run ruff check app/ tests/ --select=E,W,F --quiet

        uses: actions/setup-python@v4

        with:      - name: 🧪 Run tests

          python-version: ${{ env.PYTHON_VERSION }}        run: poetry run pytest tests/ -v --tb=short --maxfail=3



      - name: 🎨 Install Poetry      - name: 📊 Run tests with coverage (Production only)

        uses: snok/install-poetry@v1        if: matrix.coverage == true

        run: poetry run pytest tests/ -v --cov=app --cov-report=xml --cov-report=term

      - name: 📋 Install dependencies

        run: poetry install --with dev --no-interaction      - name: 📤 Upload coverage to Codecov (Production only)

        if: matrix.coverage == true

      - name: 🔍 Security scans        uses: codecov/codecov-action@v4

        run: |        with:

          poetry run bandit -r app/ || true          file: ./coverage.xml

          poetry run safety check || true          flags: unittests

        continue-on-error: true          name: codecov-umbrella

        continue-on-error: true

  docker:

    name: 🐳 Docker Build  security:

    runs-on: ubuntu-latest    name: 🔒 Security Scan

    needs: [test]    runs-on: ubuntu-latest

    if: github.ref == 'refs/heads/main' || github.event_name == 'release'    needs: [test-matrix]

        if: github.ref == 'refs/heads/main'

    steps:    steps:

      - name: 📥 Checkout code      - name: 📥 Checkout code

        uses: actions/checkout@v4        uses: actions/checkout@v4



      - name: 🐳 Set up Docker Buildx      - name: 🐍 Set up Python

        uses: docker/setup-buildx-action@v3        uses: actions/setup-python@v4

        with:

      - name: 🔨 Build Docker image          python-version: '3.12'

        uses: docker/build-push-action@v5

        with:      - name: 🎨 Install Poetry

          context: .        uses: snok/install-poetry@v1

          push: false        with:

          tags: gemini-ai-chatbot:latest          version: latest

          cache-from: type=gha          virtualenvs-create: true

          cache-to: type=gha,mode=max          virtualenvs-in-project: true

      - name: 📦 Cache Poetry dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pypoetry
          key: ${{ runner.os }}-poetry-security-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-security-

      - name: 📋 Install dependencies
        run: poetry install --with dev --no-interaction --no-ansi

      - name: 🔍 Run Bandit security scan
        run: poetry run bandit -r app/ -f json -o bandit-report.json || true
        continue-on-error: true

      - name: 🔍 Run Safety check
        run: poetry run safety check --json --output safety-report.json || true
        continue-on-error: true

  docker:
    name: 🐳 Docker Build
    runs-on: ubuntu-latest
    needs: [test-matrix]
    if: github.ref == 'refs/heads/main' || github.event_name == 'release'
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🏷️ Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: gemini-ai-chatbot
          tags: |
            type=ref,event=branch
            type=semver,pattern={{version}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: 🔨 Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: false
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-readiness:
    name: 🌟 Deploy Readiness Check
    runs-on: ubuntu-latest
    needs: [test-matrix, security, docker]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🌟 Deployment readiness verification
        run: |
          echo "✅ All tests passed for Python 3.11 and 3.12"
          echo "✅ Security checks completed"
          echo "✅ Docker image built successfully"
          echo "🚀 Project ready for deployment!"