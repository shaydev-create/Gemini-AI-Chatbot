# 🚀 CI/CD Pipeline Optimizado

name: 🚀 CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  PYTHON_DEV_VERSION: '3.11'
  PYTHON_PROD_VERSION: '3.12'
  NODE_VERSION: '18'

jobs:
  # 🧪 Tests Matrix - Python 3.11 y 3.12
  test-matrix:
    name: 🧪 Tests - Python ${{ matrix.python-version }}
    runs-on: ubuntu-latest
    timeout-minutes: 15
    strategy:
      fail-fast: false  # Continuar con otras versiones si una falla
      matrix:
        python-version: ['3.11', '3.12']
        include:
          - python-version: '3.11'
            test-type: 'development'
            coverage: false
          - python-version: '3.12'
            test-type: 'production'
            coverage: true
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: 📦 Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: latest
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: 📦 Cache Poetry dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pypoetry
            .venv
          key: ${{ runner.os }}-poetry-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-${{ matrix.python-version }}-
            ${{ runner.os }}-poetry-
            
      - name: 📋 Install dependencies
        run: |
          poetry install --with dev --no-interaction --no-ansi --no-root

      - name: 🔧 Format check
        run: poetry run ruff format --check app/ tests/ --quiet

      - name: 🔍 Lint check
        run: poetry run ruff check app/ tests/ --select=E,W,F --quiet

      - name: 🧪 Run basic tests (Python ${{ matrix.python-version }})
        run: |
          APP_ENV=testing poetry run pytest tests/test_basic.py tests/test_main.py -v --tb=short --maxfail=3
          
      - name: 🧪 Run full test suite (Python ${{ matrix.python-version }})
        if: matrix.coverage == true
        run: |
      - name: � Upload coverage to Codecov (Production only)
        if: matrix.coverage == true
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

  # 🔒 Security Scan (Solo en main)
  security:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    needs: [test-matrix]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐍 Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
        
    - name: 📦 Install Poetry
      uses: snok/install-poetry@v1
      
    - name: 📦 Cache Poetry dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pypoetry
        key: ${{ runner.os }}-poetry-security-${{ hashFiles('**/poetry.lock') }}
        restore-keys: |
          ${{ runner.os }}-poetry-security-
          
    - name: 📋 Install dependencies
      run: |
        poetry install --with dev --no-interaction --no-ansi
        
    - name: 🔍 Run Bandit security scan
      run: poetry run bandit -r app/ -f json -o bandit-report.json || true
        
    - name: 🔍 Run Safety check
      run: poetry run safety check --json --output safety-report.json || true

  # 🐳 Docker Build (Solo en main y releases)
  docker:
    name: 🐳 Docker Build
    runs-on: ubuntu-latest
    needs: [test-matrix]
    if: github.ref == 'refs/heads/main' || github.event_name == 'release'
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    # Login to Docker Hub is optional and requires secrets to be configured
    # - name: 🔑 Login to Docker Hub (optional)
    #   if: ${{ secrets.DOCKER_USERNAME != '' && secrets.DOCKER_PASSWORD != '' }}
    #   uses: docker/login-action@v3
    #   with:
    #     username: ${{ secrets.DOCKER_USERNAME }}
    #     password: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: 🏷️ Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: gemini-ai-chatbot
        tags: |
          type=ref,event=branch
          type=semver,pattern={{version}}
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: 🔨 Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: false
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # 🚀 Deploy Readiness Check
  deploy-readiness:
    name: 🌟 Deploy Readiness Check
    runs-on: ubuntu-latest
    needs: [test-matrix, security, docker]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🌟 Deployment readiness verification
      run: |
        echo "✅ All tests passed for Python 3.11 and 3.12"
        echo "✅ Security checks completed"
        echo "✅ Docker image built successfully"
        echo "� Project ready for deployment!"