#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üîç DIAGN√ìSTICO DE APLICACI√ìN NO RESPONSIVA
=========================================

Script para diagnosticar por qu√© la aplicaci√≥n en Vercel
no est√° respondiendo correctamente.
"""

import requests
import time
from datetime import datetime


def test_app_functionality(url):
    """Prueba la funcionalidad espec√≠fica de la aplicaci√≥n."""
    print(f"üîç PROBANDO FUNCIONALIDAD EN: {url}")
    print("-" * 50)
    
    try:
        # Test b√°sico de conexi√≥n
        response = requests.get(url, timeout=15)
        print(f"üì° Conexi√≥n: {response.status_code}")
        print(f"‚è±Ô∏è  Tiempo: {response.elapsed.total_seconds():.2f}s")
        
        if response.status_code == 200:
            content = response.text
            print(f"üìÑ Tama√±o contenido: {len(content)} caracteres")
            
            # Verificar contenido espec√≠fico
            checks = {
                'HTML b√°sico': '<html' in content.lower(),
                'T√≠tulo': '<title>' in content.lower(),
                'CSS': '<style>' in content.lower() or '.css' in content.lower(),
                'JavaScript': '<script>' in content.lower() or '.js' in content.lower(),
                'Flask/Python': 'flask' in content.lower() or 'python' in content.lower(),
                'Gemini': 'gemini' in content.lower(),
                'Chatbot': 'chatbot' in content.lower() or 'chat' in content.lower(),
                'Formulario': '<form' in content.lower() or 'input' in content.lower(),
                'API Key': 'api' in content.lower() and 'key' in content.lower()
            }
            
            print(f"\nüîç AN√ÅLISIS DE CONTENIDO:")
            for check, result in checks.items():
                status = "‚úÖ" if result else "‚ùå"
                print(f"   {status} {check}")
            
            # Mostrar las primeras l√≠neas del HTML
            print(f"\nüìÑ PRIMERAS L√çNEAS DEL HTML:")
            lines = content.split('\n')[:10]
            for i, line in enumerate(lines, 1):
                if line.strip():
                    print(f"   {i:2d}: {line.strip()[:80]}")
            
            return True, content, checks
            
        else:
            print(f"‚ùå Error HTTP: {response.status_code}")
            return False, None, {}
            
    except requests.exceptions.Timeout:
        print("‚è∞ TIMEOUT: La aplicaci√≥n no responde en 15 segundos")
        return False, None, {}
    except requests.exceptions.ConnectionError:
        print("üîå ERROR DE CONEXI√ìN: No se puede conectar")
        return False, None, {}
    except Exception as e:
        print(f"‚ùå ERROR: {e}")
        return False, None, {}


def check_common_issues(content, checks):
    """Verifica problemas comunes."""
    print(f"\nüö® DIAGN√ìSTICO DE PROBLEMAS:")
    print("-" * 35)
    
    issues = []
    solutions = []
    
    # Error 1: P√°gina est√°tica sin funcionalidad
    if checks.get('HTML b√°sico') and not checks.get('Flask/Python'):
        issues.append("üìÑ La p√°gina parece ser HTML est√°tico")
        solutions.append("üîß Verificar que Flask est√© configurado correctamente")
    
    # Error 2: Sin formulario de chat
    if not checks.get('Formulario'):
        issues.append("üí¨ No se detect√≥ formulario de chat")
        solutions.append("üîß Verificar que el HTML incluya inputs para el chat")
    
    # Error 3: Sin JavaScript
    if not checks.get('JavaScript'):
        issues.append("‚ö° No se detect√≥ JavaScript")
        solutions.append("üîß El chat necesita JS para enviar mensajes")
    
    # Error 4: Posible problema de API Key
    if not checks.get('API Key'):
        issues.append("üîë No se menciona configuraci√≥n de API")
        solutions.append("üîß Verificar GEMINI_API_KEY en variables de entorno")
    
    # Error 5: Contenido muy peque√±o
    if content and len(content) < 1000:
        issues.append("üìè Contenido HTML muy peque√±o")
        solutions.append("üîß Posible error en el template o routing")
    
    if issues:
        print("‚ùå PROBLEMAS DETECTADOS:")
        for issue in issues:
            print(f"   {issue}")
        
        print(f"\nüí° SOLUCIONES SUGERIDAS:")
        for solution in solutions:
            print(f"   {solution}")
    else:
        print("‚úÖ No se detectaron problemas obvios")
    
    return issues, solutions


def check_vercel_configuration():
    """Verifica la configuraci√≥n de Vercel."""
    print(f"\n‚öôÔ∏è VERIFICANDO CONFIGURACI√ìN DE VERCEL:")
    print("-" * 45)
    
    # Verificar archivos de configuraci√≥n
    import os
    
    config_files = [
        ('vercel.json', 'Configuraci√≥n de Vercel'),
        ('requirements.txt', 'Dependencias Python'),
        ('runtime.txt', 'Versi√≥n de Python'),
        ('app.py', 'Aplicaci√≥n principal'),
        ('wsgi.py', 'WSGI entry point'),
        ('Procfile', 'Proceso de inicio')
    ]
    
    print("üìÅ ARCHIVOS DE CONFIGURACI√ìN:")
    for filename, description in config_files:
        if os.path.exists(filename):
            print(f"   ‚úÖ {filename} - {description}")
        else:
            print(f"   ‚ùå {filename} - {description} (FALTANTE)")
    
    # Verificar estructura de la app
    print(f"\nüìÇ ESTRUCTURA DE LA APLICACI√ìN:")
    app_files = [
        'app/__init__.py',
        'app/main/__init__.py', 
        'app/main/routes.py',
        'app/templates/',
        'app/static/'
    ]
    
    for filepath in app_files:
        if os.path.exists(filepath):
            print(f"   ‚úÖ {filepath}")
        else:
            print(f"   ‚ùå {filepath} (FALTANTE)")


def suggest_fixes():
    """Sugiere fixes para problemas comunes."""
    print(f"\nüîß POSIBLES SOLUCIONES:")
    print("=" * 30)
    
    print("1. üîë VERIFICAR API KEY:")
    print("   ‚Ä¢ Ve a Vercel Dashboard ‚Üí tu proyecto ‚Üí Settings")
    print("   ‚Ä¢ Environment Variables ‚Üí a√±adir GEMINI_API_KEY")
    print("   ‚Ä¢ Valor: tu clave real de Google AI Studio")
    print()
    
    print("2. üìÑ VERIFICAR ENTRY POINT:")
    print("   ‚Ä¢ Vercel debe saber qu√© archivo ejecutar")
    print("   ‚Ä¢ Crear vercel.json con configuraci√≥n correcta")
    print("   ‚Ä¢ Verificar que app/__init__.py exporte la app")
    print()
    
    print("3. üêç VERIFICAR PYTHON VERSION:")
    print("   ‚Ä¢ Crear runtime.txt con: python-3.11.0")
    print("   ‚Ä¢ Verificar requirements.txt actualizado")
    print()
    
    print("4. üåê VERIFICAR WSGI:")
    print("   ‚Ä¢ Crear wsgi.py que importe la app Flask")
    print("   ‚Ä¢ Configurar vercel.json para usar wsgi.py")
    print()
    
    print("5. üîÑ RE-DEPLOY:")
    print("   ‚Ä¢ Hacer un commit peque√±o")
    print("   ‚Ä¢ Push a GitHub para trigger re-deployment")


def main():
    """Funci√≥n principal."""
    print("üîç DIAGN√ìSTICO DE APLICACI√ìN NO RESPONSIVA")
    print("=" * 50)
    print()
    
    # Probar ambas URLs
    urls = [
        "https://gemini-ai-chatbot.vercel.app",
        "https://my-gemini-chatbot.vercel.app"
    ]
    
    results = {}
    
    for url in urls:
        print(f"\n{'='*60}")
        success, content, checks = test_app_functionality(url)
        results[url] = {'success': success, 'content': content, 'checks': checks}
        
        if success and content:
            issues, solutions = check_common_issues(content, checks)
            results[url]['issues'] = issues
            results[url]['solutions'] = solutions
        
        time.sleep(2)  # Pausa entre requests
    
    # Verificar configuraci√≥n local
    check_vercel_configuration()
    
    # Sugerir fixes
    suggest_fixes()
    
    # Resumen final
    print(f"\nüéØ RESUMEN FINAL:")
    print("=" * 20)
    working_count = sum(1 for r in results.values() if r['success'])
    
    if working_count == 0:
        print("‚ùå NINGUNA URL FUNCIONA CORRECTAMENTE")
        print("üîß ACCI√ìN REQUERIDA: Revisar configuraci√≥n de Vercel")
    elif working_count == len(urls):
        print("‚úÖ TODAS LAS URLs RESPONDEN")
        print("üîç Pero puede haber problemas de funcionalidad")
    else:
        print(f"‚ö†Ô∏è  {working_count}/{len(urls)} URLs funcionando")
    
    # Pr√≥ximos pasos
    print(f"\nüìã PR√ìXIMOS PASOS RECOMENDADOS:")
    print("1. üîß Verificar configuraci√≥n de Vercel")
    print("2. üîë A√±adir GEMINI_API_KEY en environment variables")
    print("3. üìÑ Crear vercel.json si no existe")
    print("4. üîÑ Hacer redeploy con git push")
    print("5. üß™ Probar localmente con 'python run.py'")


if __name__ == "__main__":
    main()