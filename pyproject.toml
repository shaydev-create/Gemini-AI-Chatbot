[tool.poetry]
name = "gemini-ai-chatbot"
version = "2.0.0"
description = "Chatbot inteligente con interfaz futurista usando Google Gemini AI y un backend Flask."
authors = ["Shaydev <shaydev.create@gmail.com>"]
license = "MIT"
readme = "README.md"
homepage = "https://github.com/shaydev-create/Gemini-AI-Chatbot"
repository = "https://github.com/shaydev-create/Gemini-AI-Chatbot"
keywords = ["chatbot", "ai", "gemini", "flask", "python", "docker"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Framework :: Flask",
    "Topic :: Communications :: Chat",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
packages = [{include = "app"}]

[tool.poetry.dependencies]
python = ">=3.11,<3.14"  # Soporta Python 3.11, 3.12, y 3.13
# Framework Flask
Flask = "^3.0.0"
Flask-SQLAlchemy = "^3.1.1"
Flask-JWT-Extended = "^4.6.0"
Flask-CORS = "^4.0.0"
Flask-Compress = "^1.14"
Flask-Migrate = "^4.0.7"
Werkzeug = "^3.0.1"

# Servidor de aplicación
gunicorn = "^22.0.0"

# Base de datos
SQLAlchemy = "^2.0.29"
Alembic = "^1.13.1"

# Autenticación y seguridad
PyJWT = "^2.8.0"
bcrypt = "^4.1.2"
cryptography = "^42.0.5"

# APIs de Google AI
google-generativeai = "^0.5.4"
google-cloud-aiplatform = "^1.47.0"
google-auth = "^2.29.0"

# Utilidades
python-dotenv = "^1.0.1"
requests = "^2.31.0"
psutil = "^5.9.8"

# Procesamiento de archivos (opcional)
Pillow = "^10.3.0"

# Seguridad y formularios
bleach = "^6.1.0"
flask-wtf = "^1.2.1"


[tool.poetry.group.dev.dependencies]
pytest = "^8.1.1"
pytest-cov = "^5.0.0"
pytest-mock = "^3.12.0"
pytest-asyncio = "^0.23.0"
black = "^24.4.2"
isort = "^5.13.2"
flake8 = "^7.0.0"
mypy = "^1.9.0"
bandit = "^1.7.8"
safety = "^3.0.0"
pre-commit = "^3.7.0"
ruff = "^0.4.2"
flask-socketio = "^5.5.1"
flask-babel = "^4.0.0"


[tool.poetry.scripts]
start = "app.main:run"
test = "run_tests:main"
lint = "ruff_lint:main"
format = "ruff_format:main"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

# --- Herramientas de Calidad de Código ---

[tool.black]
line-length = 88
target-version = ['py311']

[tool.isort]
profile = "black"
line_length = 88
known_first_party = ["app"]

[tool.ruff]
line-length = 88
target-version = "py311"

[tool.ruff.lint]
ignore = ["E203", "E501"]
select = ["E", "F", "W", "C", "B", "I"]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.mypy]
python_version = "3.11"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
strict_equality = true
exclude = ["venv", ".venv", "migrations"]

[[tool.mypy.overrides]]
module = [
    "flask_socketio.*",
    "google.generativeai.*",
    "werkzeug.*",
    "PIL.*",
]
ignore_missing_imports = true


[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra --cov=app --cov-report=term-missing --cov-report=html --tb=short --maxfail=5 -x"
testpaths = ["tests"]
python_files = "test_*.py"
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"
markers = [
    "asyncio: marks tests as async",
    "slow: marks tests as slow",
    "integration: marks tests as integration tests",
]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::UserWarning",
    "ignore:.*PytestUnknownMarkWarning.*",
]

[tool.coverage.run]
source = ["app"]
omit = [
    "*/tests/*",
    "*/__main__.py",
    "app/static/*",
    "app/templates/*",
    "app/migrations/*",
]

[tool.coverage.report]
fail_under = 20
show_missing = true
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if __name__ == .__main__.:",
    "if self.debug:",
    "raise NotImplementedError",
]
