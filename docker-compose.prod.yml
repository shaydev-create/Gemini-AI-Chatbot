# ===============================================================================
# 🚀 DOCKER COMPOSE PARA PRODUCCIÓN - GEMINI AI CHATBOT
#
# Este archivo extiende la configuración base (docker-compose.yml) para
# crear un entorno de producción robusto y escalable.
#
# Uso:
#   1. Asegúrate de tener un archivo .env con las variables de producción.
#   2. Construye la imagen: docker-compose -f docker-compose.yml -f docker-compose.prod.yml build
#   3. Inicia en modo Swarm (recomendado): docker swarm init && docker stack deploy -c docker-compose.yml -c docker-compose.prod.yml gemini
#   4. Inicia sin Swarm: docker-compose -f docker-compose.yml -f docker-compose.prod.yml up -d
#
# ===============================================================================

version: '3.9'

services:
  # -------------------------------------------------------------------------------
  # Servicio de la Aplicación (Producción)
  # -------------------------------------------------------------------------------
  app:
    # Construye la imagen usando el Dockerfile optimizado para producción.
    build:
      context: .
      dockerfile: Dockerfile
    # No se necesita 'command' aquí, ya que el ENTRYPOINT en el Dockerfile
    # se encarga de ejecutar Gunicorn.
    deploy:
      mode: replicated
      replicas: 2 # Ejecuta 2 instancias de la aplicación para alta disponibilidad.
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: on-failure
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  # -------------------------------------------------------------------------------
  # Proxy Inverso (Nginx)
  # -------------------------------------------------------------------------------
  nginx:
    image: nginx:1.25-alpine
    container_name: gemini-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx.conf:/etc/nginx/conf.d/default.conf:ro
      # Montar certificados SSL (se asume que son gestionados externamente, ej. Certbot)
      - /etc/letsencrypt:/etc/letsencrypt:ro
    networks:
      - gemini-network
    depends_on:
      - app
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.25'
          memory: 128M

  # -------------------------------------------------------------------------------
  # Monitoreo (Prometheus & Grafana) - Opcional
  # -------------------------------------------------------------------------------
  # Estos servicios están definidos pero no se iniciarán a menos que se
  # especifique el perfil 'monitoring'.
  # Uso: docker-compose ... --profile monitoring up
  prometheus:
    image: prom/prometheus:v2.47.2
    container_name: gemini-prometheus
    profiles: ["monitoring"]
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    restart: unless-stopped

  grafana:
    image: grafana/grafana:10.2.0
    container_name: gemini-grafana
    profiles: ["monitoring"]
    ports:
      - "3000:3000"
    env_file:
      - .env
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/provisioning:/etc/grafana/provisioning:ro
    depends_on:
      - prometheus
    restart: unless-stopped

# ===============================================================================
# Volúmenes Nombrados para Producción
# ===============================================================================
# Se definen aquí para asegurar que Docker los gestione.
volumes:
  prometheus_data:
    name: gemini-prometheus-data
  grafana_data:
    name: gemini-grafana-data

# Red personalizada
networks:
  gemini-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
