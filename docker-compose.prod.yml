# Configuración de producción con Docker Compose
version: '3.8'

services:
  # Aplicación principal
  app:
    build: .
    container_name: gemini_chatbot_prod
    restart: unless-stopped
    ports:
      - "5000:5000"
    environment:
      - FLASK_ENV=production
      - FLASK_DEBUG=0
      - PYTHONPATH=/app
      # Base de datos
      - DATABASE_URL=postgresql://gemini_user:${POSTGRES_PASSWORD}@postgres:5432/gemini_chatbot_prod
      - REDIS_URL=redis://redis:6379/0
      # Gemini API (fallback)
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - GOOGLE_API_KEY=${GOOGLE_API_KEY}
      # Vertex AI
      - VERTEX_AI_PROJECT_ID=${VERTEX_AI_PROJECT_ID}
      - VERTEX_AI_LOCATION=${VERTEX_AI_LOCATION}
      - VERTEX_AI_ENABLED=${VERTEX_AI_ENABLED:-true}
      - VERTEX_AI_MODEL=${VERTEX_AI_MODEL:-gemini-1.5-pro}
      - VERTEX_AI_MAX_DAILY_COST=${VERTEX_AI_MAX_DAILY_COST:-10.0}
      - GOOGLE_APPLICATION_CREDENTIALS=/app/credentials/service-account-key.json
      # Seguridad
      - SECRET_KEY=${SECRET_KEY}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      # Configuración de producción
      - WORKERS=${WORKERS:-4}
      - MAX_CONTENT_LENGTH=${MAX_CONTENT_LENGTH:-16777216}
    volumes:
      - ./logs:/app/logs
      - ./uploads:/app/uploads
      - ./ssl:/app/ssl
      - ./credentials:/app/credentials:ro
      - ./backups:/app/backups
    depends_on:
      - postgres
      - redis
    networks:
      - gemini_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Base de datos PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: gemini_postgres_prod
    restart: unless-stopped
    environment:
      POSTGRES_DB: gemini_chatbot_prod
      POSTGRES_USER: gemini_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backups:/backups
    networks:
      - gemini_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U gemini_user -d gemini_chatbot_prod"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis para caché
  redis:
    image: redis:7-alpine
    container_name: gemini_redis_prod
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis_password} --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
      - ./config/redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - gemini_network
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD:-redis_password}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx como proxy reverso
  nginx:
    image: nginx:alpine
    container_name: gemini_nginx_prod
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
      - ./app/static:/var/www/static:ro
    depends_on:
      - app
    networks:
      - gemini_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoreo con Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: gemini_prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    networks:
      - gemini_network

  # Grafana para visualización
  grafana:
    image: grafana/grafana:latest
    container_name: gemini_grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - gemini_network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  gemini_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16