# Docker Compose para Gemini AI Chatbot - Optimizado
version: '3.8'

services:
  # Aplicación principal
  gemini-ai-chatbot:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: gemini-chatbot-app
    ports:
      - "5000:5000"
    environment:
      - FLASK_ENV=production
      - FLASK_DEBUG=0
      - PYTHONPATH=/app
      # Gemini API
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - GOOGLE_API_KEY=${GOOGLE_API_KEY}
      # Vertex AI
      - VERTEX_AI_PROJECT_ID=${VERTEX_AI_PROJECT_ID}
      - VERTEX_AI_LOCATION=${VERTEX_AI_LOCATION:-us-central1}
      - VERTEX_AI_ENABLED=${VERTEX_AI_ENABLED:-true}
      - GOOGLE_APPLICATION_CREDENTIALS=/app/credentials/service-account-key.json
      # Base de datos
      - DATABASE_URL=postgresql://gemini_user:${POSTGRES_PASSWORD}@postgres:5432/gemini_chatbot
      - REDIS_URL=redis://redis:6379/0
      # Seguridad
      - SECRET_KEY=${SECRET_KEY}
    volumes:
      - ./logs:/app/logs
      - ./uploads:/app/uploads
      - ./credentials:/app/credentials:ro
      - ./backups:/app/backups
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - gemini-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Base de datos PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: gemini-postgres
    environment:
      POSTGRES_DB: gemini_chatbot
      POSTGRES_USER: gemini_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --locale=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backups:/backups
      - ./docker/init-db.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - gemini-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U gemini_user -d gemini_chatbot"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Redis para caché y sesiones
  redis:
    image: redis:7-alpine
    container_name: gemini-redis
    volumes:
      - redis_data:/data
    networks:
      - gemini-network
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Nginx como proxy reverso (opcional)
  nginx:
    image: nginx:alpine
    container_name: gemini-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - ./app/static:/var/www/static:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - gemini-ai-chatbot
    networks:
      - gemini-network
    restart: unless-stopped
    profiles:
      - nginx

# Redes
networks:
  gemini-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# Volúmenes persistentes
volumes:
  postgres_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/postgres
  redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/redis
