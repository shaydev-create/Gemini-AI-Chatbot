version: '3.8'

services:
  # Aplicación principal
  gemini-ai-chatbot:
    build: .
    container_name: gemini-chatbot-prod
    ports:
      - "5000:5000"
    environment:
      - FLASK_ENV=production
      - FLASK_DEBUG=0
      - PYTHONPATH=/app
      # Gemini API (fallback)
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - GOOGLE_API_KEY=${GOOGLE_API_KEY}
      # Vertex AI
      - VERTEX_AI_PROJECT_ID=${VERTEX_AI_PROJECT_ID}
      - VERTEX_AI_LOCATION=${VERTEX_AI_LOCATION}
      - VERTEX_AI_ENABLED=${VERTEX_AI_ENABLED:-true}
      - GOOGLE_APPLICATION_CREDENTIALS=/app/credentials/service-account-key.json
      # Base de datos
      - DATABASE_URL=postgresql://gemini_user:${POSTGRES_PASSWORD}@postgres:5432/gemini_chatbot
    volumes:
      - ./logs:/app/logs
      - ./uploads:/app/uploads
      - ./.env:/app/.env
      - ./credentials:/app/credentials:ro
    depends_on:
      - postgres
      - redis
    networks:
      - gemini-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Base de datos PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: gemini-postgres-prod
    environment:
      POSTGRES_DB: gemini_chatbot
      POSTGRES_USER: gemini_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backups:/backups
    networks:
      - gemini-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U gemini_user -d gemini_chatbot"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis para caché y sesiones
  redis:
    image: redis:7-alpine
    container_name: gemini-redis-prod
    volumes:
      - redis_data:/data
    networks:
      - gemini-network
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Nginx como proxy reverso
  nginx:
    image: nginx:alpine
    container_name: gemini-nginx-prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - ./app/static:/var/www/static:ro
    depends_on:
      - gemini-ai-chatbot
    networks:
      - gemini-network
    restart: unless-stopped
    profiles:
      - production

# Redes
networks:
  gemini-network:
    driver: bridge

# Volúmenes persistentes
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  logs:
    driver: local
