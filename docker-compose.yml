# ===============================================================================
# 🚀 DOCKER COMPOSE BASE - GEMINI AI CHATBOT
#
# Este es el archivo base de Docker Compose. Define los servicios, redes y
# volúmenes comunes que se utilizan tanto en desarrollo como en producción.
# No se debe ejecutar directamente. Úsalo en conjunto con docker-compose.dev.yml
# o docker-compose.prod.yml.
#
# Ejemplo de uso:
#   docker-compose -f docker-compose.yml -f docker-compose.dev.yml up
#   docker-compose -f docker-compose.yml -f docker-compose.prod.yml up
#
# ===============================================================================

services:
  # -------------------------------------------------------------------------------
  # Servicio de la Aplicación (Plantilla)
  # -------------------------------------------------------------------------------
  # Este servicio es una plantilla. La configuración específica de build/command
  # se define en los archivos de override (dev.yml o prod.yml).
  app:
    container_name: gemini-app
    env_file:
      - .env # Carga variables de entorno desde un archivo .env
    restart: unless-stopped
    networks:
      - gemini-network
    depends_on:
      db:
        condition: service_healthy
      cache:
        condition: service_healthy

  # -------------------------------------------------------------------------------
  # Servicio de Base de Datos (PostgreSQL)
  # -------------------------------------------------------------------------------
  db:
    image: postgres:16-alpine
    container_name: gemini-db
    env_file:
      - .env # Utiliza las mismas variables para consistencia
    environment:
      # Asegura que las variables POSTGRES_* estén definidas
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/init-db.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - gemini-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # -------------------------------------------------------------------------------
  # Servicio de Caché (Redis)
  # -------------------------------------------------------------------------------
  cache:
    image: redis:7-alpine
    container_name: gemini-cache
    command: redis-server --appendonly yes
    env_file:
      - .env
    volumes:
      - redis_data:/data
    networks:
      - gemini-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

# ===============================================================================
# Redes y Volúmenes
# ===============================================================================

networks:
  gemini-network:
    driver: bridge
    name: gemini-network

volumes:
  postgres_data:
    name: gemini-postgres-data
  redis_data:
    name: gemini-redis-data
