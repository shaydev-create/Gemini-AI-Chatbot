# 🐳 Docker Compose para Gemini AI Chatbot
version: '3.8'

services:
  # 🤖 Aplicación Principal Gemini AI Chatbot
  gemini-chatbot:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: gemini-chatbot-app
    restart: unless-stopped
    environment:
      - FLASK_ENV=production
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - SECRET_KEY=${SECRET_KEY}
      - FLASK_DEBUG=False
    volumes:
      - ./logs:/app/logs
      - ./data/instance:/app/data/instance
      - ./static:/app/static
    networks:
      - gemini-network
    ports:
      - "5000:5000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # 🌐 Nginx Reverse Proxy (Opcional para producción)
  nginx:
    image: nginx:alpine
    container_name: gemini-chatbot-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/ssl:/etc/nginx/ssl
      - ./static:/var/www/static
    depends_on:
      - gemini-chatbot
    networks:
      - gemini-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    profiles:
      - production  # Solo se ejecuta con --profile production

# 🌐 Red Personalizada
networks:
  gemini-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16

# 📝 Configuración adicional para desarrollo
# Para ejecutar solo la aplicación:
# docker-compose up gemini-chatbot
#
# Para ejecutar con nginx (producción):
# docker-compose --profile production up
#
# Variables de entorno requeridas en .env:
# GEMINI_API_KEY=tu_clave_api_de_gemini
# SECRET_KEY=tu_clave_secreta_super_segura