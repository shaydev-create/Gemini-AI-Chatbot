#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üöÄ CONFIGURACI√ìN DE GUNICORN - GEMINI AI CHATBOT

Configuraci√≥n optimizada para producci√≥n con m√∫ltiples workers,
logging avanzado y configuraci√≥n de seguridad.
"""

import os
import multiprocessing

# ===== CONFIGURACI√ìN B√ÅSICA =====
bind = "0.0.0.0:5000"
workers = multiprocessing.cpu_count() * 2 + 1
worker_class = "sync"
worker_connections = 1000
max_requests = 1000
max_requests_jitter = 50
preload_app = True
timeout = 120
keepalive = 5

# ===== CONFIGURACI√ìN DE PROCESOS =====
user = os.getenv('GUNICORN_USER', 'www-data')
group = os.getenv('GUNICORN_GROUP', 'www-data')
tmp_upload_dir = None
worker_tmp_dir = "/dev/shm"

# ===== CONFIGURACI√ìN SSL =====
keyfile = os.getenv('SSL_KEYFILE', '/app/ssl/key.pem')
certfile = os.getenv('SSL_CERTFILE', '/app/ssl/cert.pem')
ssl_version = 2  # TLS 1.2+
ciphers = 'ECDHE+AESGCM:ECDHE+CHACHA20:DHE+AESGCM:DHE+CHACHA20:!aNULL:!MD5:!DSS'

# ===== CONFIGURACI√ìN DE LOGGING =====
accesslog = os.getenv('GUNICORN_ACCESS_LOG', '/app/logs/gunicorn_access.log')
errorlog = os.getenv('GUNICORN_ERROR_LOG', '/app/logs/gunicorn_error.log')
loglevel = os.getenv('GUNICORN_LOG_LEVEL', 'info')
access_log_format = '%(h)s %(l)s %(u)s %(t)s "%(r)s" %(s)s %(b)s "%(f)s" "%(a)s" %(D)s'

# ===== CONFIGURACI√ìN DE SEGURIDAD =====
limit_request_line = 4094
limit_request_fields = 100
limit_request_field_size = 8190

# ===== CONFIGURACI√ìN DE PERFORMANCE =====
# Configuraci√≥n de memoria
max_requests = 1000
max_requests_jitter = 50

# Configuraci√≥n de timeouts
timeout = 120
graceful_timeout = 30
keepalive = 5

# ===== HOOKS DE GUNICORN =====


def when_ready(server):
    """Hook ejecutado cuando el servidor est√° listo."""
    server.log.info("üöÄ Gemini AI Chatbot - Servidor Gunicorn iniciado")
    server.log.info(f"üìä Workers: {workers}")
    server.log.info(
        f"üîí SSL: {
            'Habilitado' if keyfile and certfile else 'Deshabilitado'}")


def worker_int(worker):
    """Hook ejecutado cuando un worker recibe SIGINT."""
    worker.log.info(f"‚ö†Ô∏è Worker {worker.pid} recibi√≥ SIGINT")


def pre_fork(server, worker):
    """Hook ejecutado antes de hacer fork de un worker."""
    server.log.info(f"üîÑ Iniciando worker {worker.age}")


def post_fork(server, worker):
    """Hook ejecutado despu√©s de hacer fork de un worker."""
    server.log.info(f"‚úÖ Worker {worker.pid} iniciado correctamente")


def worker_abort(worker):
    """Hook ejecutado cuando un worker es abortado."""
    worker.log.error(f"‚ùå Worker {worker.pid} abortado")


def pre_exec(server):
    """Hook ejecutado antes de exec."""
    server.log.info("üîÑ Reiniciando servidor Gunicorn")


def on_exit(server):
    """Hook ejecutado al salir del servidor."""
    server.log.info("üõë Gemini AI Chatbot - Servidor Gunicorn detenido")


def on_reload(server):
    """Hook ejecutado al recargar configuraci√≥n."""
    server.log.info("üîÑ Recargando configuraci√≥n de Gunicorn")

# ===== CONFIGURACI√ìN ESPEC√çFICA POR ENTORNO =====


# Desarrollo
if os.getenv('FLASK_ENV') == 'development':
    workers = 1
    reload = True
    loglevel = 'debug'
    timeout = 0  # Sin timeout en desarrollo

# Producci√≥n
elif os.getenv('FLASK_ENV') == 'production':
    workers = multiprocessing.cpu_count() * 2 + 1
    preload_app = True
    max_requests = 1000
    max_requests_jitter = 50

    # Configuraci√≥n de seguridad adicional para producci√≥n
    forwarded_allow_ips = '*'
    secure_scheme_headers = {
        'X-FORWARDED-PROTOCOL': 'ssl',
        'X-FORWARDED-PROTO': 'https',
        'X-FORWARDED-SSL': 'on'
    }

# ===== CONFIGURACI√ìN DE MONITOREO =====
statsd_host = os.getenv('STATSD_HOST')
statsd_prefix = 'gemini_chatbot'

# ===== CONFIGURACI√ìN AVANZADA =====
# Configuraci√≥n de memoria compartida
worker_tmp_dir = "/dev/shm"

# Configuraci√≥n de se√±ales
graceful_timeout = 30
timeout = 120

# Configuraci√≥n de conexiones
worker_connections = 1000
keepalive = 5

print("üöÄ Configuraci√≥n de Gunicorn cargada correctamente")
print(f"üìä Workers configurados: {workers}")
print(f"üîó Bind: {bind}")
print(f"‚è±Ô∏è Timeout: {timeout}s")
print(f"üîí SSL: {'Habilitado' if keyfile and certfile else 'Deshabilitado'}")
